@IsTest
private class AsanaOutboundTests {

    /* ───────────────────────────
     *  Mock for /tasks & /webhooks
     * ─────────────────────────── */
    private class OutboundCalloutMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');

            if (req.getEndpoint().endsWith('/tasks')) {
                res.setStatusCode(201);
                res.setBody('{"data":{"gid":"999999999999999"}}');
            } else if (req.getEndpoint().endsWith('/webhooks')) {
                res.setStatusCode(201);
                res.setBody('{"data":{"gid":"888888888888888"}}');
            } else {
                res.setStatusCode(200);
                res.setBody('{"data":{}}');
            }
            return res;
        }
    }

    /* ───────────── Test #1  create Asana task ───────────── */
    @IsTest
    static void testCreateTask() {

        // make a Salesforce Task to feed the invocable
        Task t = new Task(Subject='Unit-Test', Status='Open');
        insert t;

        // build Flow-style input
        AsanaTaskSync.TaskRequest req = new AsanaTaskSync.TaskRequest();
        req.taskId      = t.Id;
        req.taskName    = 'Unit-Test';
        req.description = 'desc';
        req.dueDate     = Date.today().addDays(3);
        req.status      = 'Open';
        req.assigneeGid = '123456';
        req.projectGid  = '987654';

        Test.setMock(HttpCalloutMock.class, new OutboundCalloutMock());

        Test.startTest();
        AsanaTaskSync.createTask(new List<AsanaTaskSync.TaskRequest>{ req });
        Test.stopTest();

        // assert gid wrote back
        Task t2 = [SELECT Asana_Task_ID__c FROM Task WHERE Id = :t.Id];
        System.assertEquals('999999999999999', t2.Asana_Task_ID__c);
    }

    /* ───────────── Test #2  register webhook ───────────── */
    @IsTest
    static void testRegisterWebhook() {

        Test.setMock(HttpCalloutMock.class, new OutboundCalloutMock());

        Test.startTest();
        System.enqueueJob(new RegisterAsanaWebhook('999999999999999'));
        Test.stopTest();

        /* no unhandled exceptions = success */
        System.assert(true, 'Queueable completed');
    }
}
