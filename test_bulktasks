@IsTest
private class BulkTaskCreatorTest {
    
    @IsTest
    static void testCreateTasks() {
        // 1) Create a product
        Product2 prod = new Product2(
            Name       = 'Test Product - BulkTaskCreator',
            ProductCode= 'TEST-PROD-001',
            IsActive   = true
        );
        insert prod;
        
        // 2) Activate Standard Pricebook
        Id stdPbId = Test.getStandardPricebookId();
        update new Pricebook2(Id = stdPbId, IsActive = true);
        
        // 3) Insert standard PBE (defines the standard price)
        PricebookEntry stdPbe = new PricebookEntry(
            Pricebook2Id = stdPbId,
            Product2Id   = prod.Id,
            UnitPrice    = 100,
            IsActive     = true
        );
        insert stdPbe;
        
        // 4) Create a custom PB
        Pricebook2 customPb = new Pricebook2(
            Name     = 'Custom PB - BulkTaskCreatorTest',
            IsActive = true
        );
        insert customPb;
        
        // 5) Insert a custom pricebook entry
        PricebookEntry customPbe = new PricebookEntry(
            Pricebook2Id = customPb.Id,
            Product2Id   = prod.Id,
            UnitPrice    = 120,
            IsActive     = true
        );
        insert customPbe;
        
        // 6) Create an Opportunity
        Opportunity opp = new Opportunity(
            Name         = 'Test Opp for BulkTask',
            StageName    = 'Prospecting',
            CloseDate    = Date.today().addDays(10),
            Pricebook2Id = customPb.Id
        );
        insert opp;
        
        // 7) Create OLI referencing Opp + custom PBE
        OpportunityLineItem oli = new OpportunityLineItem(
            OpportunityId    = opp.Id,
            PricebookEntryId = customPbe.Id,
            Quantity         = 2,
            UnitPrice        = 120
        );
        insert oli;
        
        // 8) Build the Flow-style input: List<List<OpportunityLineItem>>
        List<List<OpportunityLineItem>> allProducts = new List<List<OpportunityLineItem>>();
        allProducts.add(new List<OpportunityLineItem>{ oli });
        
        // 9) Set a mock callout BEFORE calling BulkTaskCreator 
        //    Because BulkTaskCreator enqueues AsanaTaskQueueable, which does callouts
        Test.setMock(HttpCalloutMock.class, new AsanaMockCallout());
        
        // 10) Now run the logic
        Test.startTest();
        BulkTaskCreator.createTasks(allProducts);
        Test.stopTest();
        
        // Coverage and no “web service callouts” error
        System.assert(true, 'BulkTaskCreator ran with mocked callout successfully.');
    }
    
    @IsTest
    static void testCreateTasksEmptyInput() {
        // No OLIs
        List<List<OpportunityLineItem>> emptyInput = new List<List<OpportunityLineItem>>();
        
        // We set mock as well, just in case
        Test.setMock(HttpCalloutMock.class, new AsanaMockCallout());
        
        Test.startTest();
        BulkTaskCreator.createTasks(emptyInput);
        Test.stopTest();
        
        System.assert(true, 'Handled empty input gracefully with no callouts.');
    }
    
    /**
     * A minimal mock callout for Asana requests
     * (same style as in AsanaTaskQueueableTest).
     */
    private class AsanaMockCallout implements HttpCalloutMock {
        public HttpResponse respond(HttpRequest req) {
            HttpResponse res = new HttpResponse();
            res.setStatusCode(200);
            
            if (req.getEndpoint().contains('/duplicate')) {
                res.setBody('{"data":{"new_project":{"gid":"999999999"}}}');
            } else if (req.getEndpoint().contains('/tasks')) {
                res.setBody('{"data":{"gid":"888888888"}}');
            } else {
                res.setBody('{"data":{}}');
            }
            return res;
        }
    }
}
