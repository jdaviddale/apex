public with sharing class AsanaTaskCreatorQueueable implements Queueable, Database.AllowsCallouts {

    private Id rfpId;

    // ‚úÖ Asana API Credentials & Required Parameters
    private static final String ASANA_API_BASE_URL = 'https://app.asana.com/api/1.0/';
    private static final String ASANA_ACCESS_TOKEN = 'Bearer 2/1202109556148637/1208926279500557:c72800628719c4ab8344f0a9a58d6ae8'; // Use Named Credentials in Production
    private static final String WORKSPACE_GID = '20443498503348'; // ‚úÖ Required Asana Workspace GID
    private static final String TEAM_GID = '1208306980181975'; // ‚úÖ Asana Team GID
    private static final String PROJECT_GID = '1208687112584130'; // ‚úÖ Existing Asana Project GID
    private static final String PROJECT_SECTION_GID = '1208699692379470'; // ‚úÖ Replace with actual Section GID

    // Constructor to pass record ID
    public AsanaTaskCreatorQueueable(Id rfpId) {
        this.rfpId = rfpId;
    }

    // ‚úÖ Invocable Method for Flow
    @InvocableMethod(label='Create Asana Task' description='Creates an Asana task within an existing project when RFP Stage changes')
    public static void enqueueAsanaTask(List<Id> rfpIds) {
        if (rfpIds == null || rfpIds.isEmpty()) {
            return;
        }

        for (Id rfpId : rfpIds) {
            System.enqueueJob(new AsanaTaskCreatorQueueable(rfpId));
        }
    }

    public void execute(QueueableContext context) {
        try {
            // ‚úÖ Query RFP details
			RFP__c rfp = [SELECT Name, Account__c, Account__r.Name, Contact__c, Contact__r.Name, Due_Date__c, 
               			   Electronic_Submission__c, Hardcopy_Submission__c, 
               			   Solution_Type__c
               			   FROM RFP__c 
              			   WHERE Id = :rfpId LIMIT 1];

            // ‚úÖ Generate task name
            String taskName = (rfp.Account__r != null ? rfp.Account__r.Name + ' - ' : '') + rfp.Name;

            // ‚úÖ Format task description
            String description = formatTaskDescription(rfp);

            // ‚úÖ Format Due Date to Asana's required format (yyyy-MM-dd)
           String formattedDueDate = (rfp.Due_Date__c != null) 
    		   ? String.valueOf(rfp.Due_Date__c.year()) + '-' + 
      			 (rfp.Due_Date__c.month() < 10 ? '0' : '') + String.valueOf(rfp.Due_Date__c.month()) + '-' + 
      			 (rfp.Due_Date__c.day() < 10 ? '0' : '') + String.valueOf(rfp.Due_Date__c.day()) 
    		   : null;

            // ‚úÖ Prepare API request body for creating the task
            Map<String, Object> requestBody = new Map<String, Object>{
                'data' => new Map<String, Object>{
                    'name' => taskName,
                    'notes' => description, // ‚úÖ Task description
                    'projects' => new List<String>{PROJECT_GID}, // ‚úÖ Assign task to existing project
                    'due_on' => formattedDueDate, // ‚úÖ Set Due Date in correct format
                    'workspace' => WORKSPACE_GID // ‚úÖ Required Workspace GID
                }
            };

            String jsonRequest = JSON.serialize(requestBody);

            // ‚úÖ API endpoint to create a new task
            HttpRequest req = new HttpRequest();
            req.setEndpoint(ASANA_API_BASE_URL + 'tasks');
            req.setMethod('POST');
            req.setHeader('Authorization', ASANA_ACCESS_TOKEN);
            req.setHeader('Content-Type', 'application/json');
            req.setBody(jsonRequest);

            // Execute the callout
            Http http = new Http();
            HttpResponse res = http.send(req);

            if (res.getStatusCode() == 201) {
                // ‚úÖ Extract the new Task GID from the response
                Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
                if (responseMap.containsKey('data')) {
                    Map<String, Object> dataMap = (Map<String, Object>) responseMap.get('data');
                    String newTaskGid = (String) dataMap.get('gid');

                    System.debug('‚úÖ Asana Task Created Successfully with GID: ' + newTaskGid);

                    // ‚úÖ Move task to "Go" section
                    moveTaskToSection(newTaskGid);
                }
            } else {
                System.debug('‚ùå Failed to create Asana Task: ' + res.getBody());
            }

        } catch (Exception e) {
            System.debug('üö® Error Creating Asana Task: ' + e.getMessage());
        }
    }

    // ‚úÖ Helper method to move task to "Go" section
    private static void moveTaskToSection(String taskGid) {
        try {
            Map<String, Object> sectionBody = new Map<String, Object>{
                'data' => new Map<String, Object>{
                    'task' => taskGid // ‚úÖ Assign task to section
                }
            };

            String jsonSectionRequest = JSON.serialize(sectionBody);

            HttpRequest sectionReq = new HttpRequest();
            sectionReq.setEndpoint(ASANA_API_BASE_URL + 'sections/' + PROJECT_SECTION_GID + '/addTask');
            sectionReq.setMethod('POST'); // ‚úÖ Add task to section
            sectionReq.setHeader('Authorization', ASANA_ACCESS_TOKEN);
            sectionReq.setHeader('Content-Type', 'application/json');
            sectionReq.setBody(jsonSectionRequest);

            Http http = new Http();
            HttpResponse sectionRes = http.send(sectionReq);

            if (sectionRes.getStatusCode() == 200) {
                System.debug('‚úÖ Task Moved to "Go" Section Successfully: ' + sectionRes.getBody());
            } else {
                System.debug('‚ùå Failed to move task to section: ' + sectionRes.getBody());
            }
        } catch (Exception e) {
            System.debug('üö® Error Moving Task to Section: ' + e.getMessage());
        }
    }

    // ‚úÖ Helper method to format task description
    private static String formatTaskDescription(RFP__c rfp) {
        String submissionType = 'Not specified';
        if (rfp.Electronic_Submission__c) {
            submissionType = 'Electronic';
        } else if (rfp.Hardcopy_Submission__c) {
            submissionType = 'Hard Copy';
        }

        return 'Contact: ' + (rfp.Contact__r != null ? rfp.Contact__r.Name : 'No Contact') + '\n' +
               'Due Date: ' + (rfp.Due_Date__c != null 
    			  ? String.valueOf(rfp.Due_Date__c.year()) + '-' + 
      				(rfp.Due_Date__c.month() < 10 ? '0' : '') + String.valueOf(rfp.Due_Date__c.month()) + '-' + 
     		 		(rfp.Due_Date__c.day() < 10 ? '0' : '') + String.valueOf(rfp.Due_Date__c.day()) 
    			  : 'No Due Date') + '\n' +

               'Submission Type: ' + submissionType + '\n' +
               'Solution Type: ' + rfp.Solution_Type__c;
    }
}
