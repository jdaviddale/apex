@IsTest
private class AsanaTaskQueueableTest {
    
    @IsTest
    static void testAsanaTaskQueueable() {
        // 1) Create a product
        Product2 prod = new Product2(
            Name       = 'Test Product - Queueable',
            ProductCode= 'PROD-Q-123',
            IsActive   = true
        );
        insert prod;
        
        // 2) Activate Standard Pricebook
        Id stdPbId = Test.getStandardPricebookId();
        update new Pricebook2(Id = stdPbId, IsActive = true);
        
        // 3) Insert a standard PBE
        PricebookEntry stdPbe = new PricebookEntry(
            Pricebook2Id = stdPbId,
            Product2Id   = prod.Id,
            UnitPrice    = 100,
            IsActive     = true
        );
        insert stdPbe;
        
        // 4) Create a custom PB
        Pricebook2 customPb = new Pricebook2(
            Name     = 'Custom PB for QueueableTest',
            IsActive = true
        );
        insert customPb;
        
        // 5) Insert custom pricebook entry
        PricebookEntry customPbe = new PricebookEntry(
            Pricebook2Id = customPb.Id,
            Product2Id   = prod.Id,
            UnitPrice    = 200,
            IsActive     = true
        );
        insert customPbe;
        
        // 6) Opportunity referencing the custom PB
        Opportunity opp = new Opportunity(
            Name         = 'Test Opp for QQueueable',
            StageName    = 'Prospecting',
            CloseDate    = Date.today().addDays(10),
            Pricebook2Id = customPb.Id
        );
        insert opp;
        
        // 7) OLI referencing that Opp + custom PBE
        //    Again, set UnitPrice
        OpportunityLineItem oli = new OpportunityLineItem(
            OpportunityId    = opp.Id,
            PricebookEntryId = customPbe.Id,
            Quantity         = 3,
            UnitPrice        = 200
        );
        insert oli;
        
        // 8) Prepare the queueable
        List<OpportunityLineItem> oliList = new List<OpportunityLineItem>{ oli };
        AsanaTaskQueueable queueableJob = new AsanaTaskQueueable(oliList);
        
        // 9) Mock the Asana callouts
        Test.setMock(HttpCalloutMock.class, new AsanaMockCallout());
        
        // 10) Execute the queueable
        Test.startTest();
        System.enqueueJob(queueableJob);
        Test.stopTest();
        
        System.assert(true, 'AsanaTaskQueueable executed with mock callouts successfully.');
    }
    
    @IsTest
    static void testAsanaTaskQueueableEmpty() {
        // No OLIs
        List<OpportunityLineItem> emptyList = new List<OpportunityLineItem>();
        AsanaTaskQueueable job = new AsanaTaskQueueable(emptyList);
        
        // Mock callouts
        Test.setMock(HttpCalloutMock.class, new AsanaMockCallout());
        
        Test.startTest();
        System.enqueueJob(job);
        Test.stopTest();
        
        System.assert(true, 'Handled empty list without exception.');
    }
    
    private class AsanaMockCallout implements HttpCalloutMock {
        public HttpResponse respond(HttpRequest req) {
            HttpResponse res = new HttpResponse();
            res.setStatusCode(200);
            
            if (req.getEndpoint().contains('/duplicate')) {
                res.setBody('{"data":{"new_project":{"gid":"999999999"}}}');
            } else if (req.getEndpoint().contains('/tasks')) {
                res.setBody('{"data":{"gid":"888888888"}}');
            } else {
                res.setBody('{"data":{}}');
            }
            return res;
        }
    }
}
